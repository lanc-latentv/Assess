# -*- coding: utf-8 -*-
"""lab2_classi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VRMkt9TWz3bi7ZcmEsglb_5VBiH4UjhJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,ConfusionMatrixDisplay,precision_score, recall_score,f1_score

df= pd.read_csv('/content/penguins_classification.csv')

df.head()

df.shape

df.isnull().sum()

df.dtypes

df.duplicated().sum()

df.info()

"""UNIVARIATE ANALYSIS"""

#HISTOGRAM
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 7))
    sns.histplot(df[column])
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

#BAR PLOT
for column in df.select_dtypes(include=['object']).columns:
    plt.figure(figsize=(10, 5))
    df[column].value_counts().plot(kind='bar')
    plt.title(f'Bar Chart of {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

df.isnull().sum()

df.columns

df['bill_depth_mm']=df['bill_depth_mm'].fillna(df['bill_depth_mm'].median())

"""BIVARIATE ANALYSIS"""

#SCATTER PLOT

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

#BOX PLOT
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

for column in numerical_columns:
    plt.figure(figsize=(10, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

df.columns

list = ['bill_length_mm']
for column in list:
  Q1 = df[column].quantile(0.25)
  Q3 = df[column].quantile(0.75)
  IQR = Q3 - Q1
  lb = Q1-1.5*IQR
  ub = Q3+1.5*IQR
  df = df[(df[column] > lb) & (df[column] < ub)]

df.head()

from sklearn.preprocessing import LabelEncoder
import pandas as pd

label_encoder = LabelEncoder()
categories = df.select_dtypes(include=['object']).columns

# Fit and transform the target column

for column in categories:
    df[column] = label_encoder.fit_transform(df[column])
df

df.columns

X = df.drop(columns = ['species'])
y = df[['species']]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = RandomForestClassifier(n_estimators=100)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluation
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)

# F1-score
f1_score = f1_score(y_test, y_pred)
print("F1-score:", f1_score)

