# -*- coding: utf-8 -*-
"""Lab4_ana.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13MKN4n3HVtPU5sLnsluvD6fE_xRyr0CP
"""

import numpy as np
import pandas as pd
import re
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
from sklearn.tree import export_graphviz
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier, BaggingClassifier, GradientBoostingClassifier, IsolationForest
from sklearn.model_selection import cross_val_score
from xgboost import XGBClassifier
import xgboost
from lightgbm import LGBMClassifier
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import confusion_matrix, classification_report, f1_score, roc_curve, roc_auc_score, precision_recall_curve, auc, r2_score, mean_squared_error, accuracy_score, recall_score, silhouette_score, silhouette_samples
warnings.filterwarnings('ignore')



df = pd.read_csv("/content/anomaly_train.csv")

df.shape

df.head()

df.dtypes

df.isna().sum()

df.duplicated().sum()

df.columns

df.head()

from sklearn.preprocessing import LabelEncoder
import pandas as pd

label_encoder = LabelEncoder()
categories = df.select_dtypes(include=['object']).columns

# Fit and transform the target column

for column in categories:
    df[column] = label_encoder.fit_transform(df[column])
df

X = df[['Amount', 'Location']]

model = IsolationForest(n_estimators=100,contamination=0.1)
model.fit(X)

y_pred = model.predict(X)

df['anomaly_score'] = model.decision_function(X)
df['anomaly'] = y_pred

df.head()

anomalies = df.loc[df['anomaly'] == -1]

anomalies

anomalies.shape

plt.scatter(df['Location'],df['anomaly_score'],label='normal')
plt.scatter(anomalies['Location'],anomalies['anomaly_score'],label='anomaly')
plt.xlabel('Location')
plt.ylabel('anomaly_score')
plt.legend()
plt.show()

plt.scatter(df['Amount'],df['anomaly_score'],label='normal')
plt.scatter(anomalies['Amount'],anomalies['anomaly_score'],label='anomaly')
plt.xlabel('Amount')
plt.ylabel('anomaly_score')
plt.legend()
plt.show()

df['is_anomaly'] = df['anomaly'].map({-1:"yes",1:"no"})

df

