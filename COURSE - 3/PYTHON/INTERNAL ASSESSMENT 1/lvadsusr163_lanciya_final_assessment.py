# -*- coding: utf-8 -*-
"""LVADSUSR163_LANCIYA_FINAL_ASSESSMENT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEpnpZ4P51fXjbM3jX5h-BBRe_rSsIpp
"""



#FINAL ASSESSMENT

#1a
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import warnings
import seaborn as sns
import datetime
warnings.filterwarnings('ignore')

df = pd.read_csv("/content/Final Dataset - IPL.csv")
df

#1b
print("Number of rows:", df.shape[0])
print("Number of columns:", df.shape[1])

print("\nData types:")
print(df.dtypes)

print("\nSummary statistics for numerical columns:")
print(df.describe())

#2a
print("\nCount of missing values :")
print(df.isna().sum())

#There are no missing values.If in case any missing values are
# present then we use fillna() and fill the missing values

#2b
print("\nCount of duplicated values :")
print(df.duplicated().sum())

#There are no duplicated values

from pydoc import pager
#3
d=df[['second_ings_score','second_ings_wkts','highscore']]
print("\nmean: \n",d.mean())
print("\nmedian: \n",d.median())
print("\nmode: \n",d.mode())
print("\nStandard deviation: \n",d.std())
print("\nVariance: \n",d.var())
a=d.max()-d.min()
print("\nRange: \n",a)

df.describe()

#4
#HISTOGRAM
plt.hist(df['highscore'])

#SCATTER PLOT


sns.scatterplot(df, x = df['first_ings_score'], y = df['first_ings_wkts'],s=30, alpha=0.8)

#BOX PLOT
sns.boxplot(df.highscore)

#PIE CHART
plt.figure(figsize=(10, 10))
data = df['match_winner'].value_counts()
l=df['match_winner'].unique()
data.plot(kind='pie', autopct='%1.1f%%',labels=l)

#BAR CHART

plt.figure(figsize=(20, 8))
data=df['venue'].value_counts()
data.plot(kind='bar')

#5
cm = df[['first_ings_score','first_ings_wkts','second_ings_score','second_ings_wkts']]
c = cm.corr()
sns.heatmap(c, annot = True,cmap='inferno')

#6
numeric_cols = ['first_ings_score','second_ings_score','highscore']
df_zscores = df[numeric_cols].apply(lambda x: np.abs((x - x.mean()) / x.std()))

outliers = df_zscores > 3

outliers_data = df[outliers.any(axis=1)]

print("Outliers:")
print(outliers_data)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df[numeric_cols])
plt.title('Boxplot of first_ings_score,second_ings_score,highscore')
plt.xlabel('Features')
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#incase we get a outlayer value this can be handled by including the specific formula
#to find the no of outliers
#Here the conditions checks only for the specified highscore column and the outliner is printed

Q1 = df['highscore'].quantile(0.25) #first quarter
Q3 = df['highscore'].quantile(0.75) #rest 3 quarters
iqr = Q3-Q1
lower_bound = Q1-1.5*iqr
upper_bound = Q3+1.5*iqr
df1 = df[(df['highscore']<lower_bound) | (df['highscore']>upper_bound)]
df1

#7
c = df.groupby(['venue', 'match_winner'])['highscore'].sum().unstack()
print(c)
plt.figure(figsize=(12, 8))
c.plot(kind='line', marker='o')
plt.title('Trend for team performance over the different venue')
plt.legend(title='venue')
plt.show()

t = df.groupby('match_winner')['margin'].sum()
m = t.pct_change().idxmax()
print("The team that has shown great performance is:\n", m)

#8
team_group = df.groupby('player_of_the_match')

team_stats = team_group.agg({
    'best_bowling': 'count',
    'top_scorer': 'count'
})

team_stats.columns = ['No_of_best_bowling', 'No_of_best_batting']

sorted_players = team_stats.sort_values(by=['No_of_best_bowling', 'No_of_best_batting'], ascending=False)

top_5_players = sorted_players.head(5)

print("Top 5 Players:")
print(top_5_players)

"""#COMPREHENSIVE ANALYSIS
#The given data shows the ipl matches held along with team score ,individual high score etc

#Our findings include how well correlated the first innings and second innings along with the wickets that that fell during the first half and second half of the game

#insights
#we find the players who performed in toplevel by doing aggregate function in groupby
#we also get to see how the team performance has been varied across different venue

#outcomes
#the plots show the match winner in pie chart and scores in scatterplot
"""

plt.figure(figsize=(5, 5))
data = df['match_winner'].value_counts()
l=df['match_winner'].unique()
data.plot(kind='pie', autopct='%1.1f%%',labels=l)